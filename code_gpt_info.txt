sys: System-specific parameters and functions.
logging: Logger module, presumably defined in your src.logger module.
2. error_message_detail Function:

def error_message_detail(error, error_detail: sys):
    _, _, exc_tb = error_detail.exc_info()
    file_name = exc_tb.tb_frame.f_code.co_filename
    error_message = "Error occurred in python script name [{0}] line number [{1}] error message[{2}]".format(
        file_name, exc_tb.tb_lineno, str(error))

    return error_message
This function takes two parameters: error (the exception object) and error_detail (information about the error, possibly obtained from sys).
error_detail.exc_info() returns a tuple (type, value, traceback) with information about the last exception that occurred.
exc_tb holds the traceback object.
exc_tb.tb_frame.f_code.co_filename gives the file name where the error occurred.
The function constructs an error message containing the file name, line number, and the original error message.
The formatted error message is returned.
3. CustomException Class:

class CustomException(Exception):
    def __init__(self, error_message, error_detail: sys):
        super().__init__(error_message)
        self.error_message = error_message_detail(error_message, error_detail=error_detail)

    def __str__(self):
        return self.error_message
This class inherits from the built-in Exception class.

__init__ method:

It takes error_message and error_detail.
Calls the error_message_detail function to get a detailed error message and stores it in self.error_message.
super().__init__(error_message) initializes the base exception with the original error message.


__str__ method:
Overrides the __str__ method to return the detailed error message when the exception is converted to a string.